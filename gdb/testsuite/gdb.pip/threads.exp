# $RIKEN_copyright:$
# $PIP_VERSION:$
# $PIP_license:$

if { [skip_pip_tests] } { return -1 }

set testfile    threads
set executable  gdb_test
set executable2 sleep
set srcfile     ${srcdir}/${subdir}/${executable}.c
set srcfile2    ${srcdir}/${subdir}/${executable2}.c
set binfile     ${objdir}/${subdir}/${executable}
set binfile2    ${objdir}/${subdir}/${executable2}

set pie_cc_opt "debug"
set pie_cc_opt [concat $pie_cc_opt [list "additional_flags=${pie_cflags} ${pie_ldflags}"]]

set pip_cc_opt "debug"
set pip_cc_opt [concat $pip_cc_opt [list "additional_flags=${pip_cppflags} ${pip_cflags} ${pip_ldflags}"]]
set pip_cc_opt [concat $pip_cc_opt [list libs=${pip_libs}]]

if { [gdb_compile ${srcfile}  ${binfile}  executable "${pip_cc_opt}" ] != ""} {
    untested "Could not compile ${binfile} w/ ${pip_cc_opt}."
    return -1
}

if { [gdb_compile ${srcfile2} ${binfile2} executable "${pie_cc_opt}"] != "" } {
    untested "Could not compile ${binfile2} w/ ${pie_cc_opt}."
    return -1
}

set env(PIP_MODE) pthread
set rootpid [eval exec $binfile &]

# The process must be spawned.
exec sleep 5

set use_gdb_stub 0
set timeout 1000

set test "attach to PIP task"

gdb_exit
gdb_start

# Attach test.
gdb_test "attach ${rootpid}" ".*Attaching to process $rootpid.*"

# info threads test.
gdb_test "info threads" ".*  2 .* Thread .*"

gdb_test "thread 2" ".*Switching to thread 2.*"

gdb_test "info threads" ".*\\* 2 .* Thread .*"

# Detach test.
gdb_test "detach" "process $rootpid.*"

# The process must be exit.
exec sleep 10
exec kill $rootpid
